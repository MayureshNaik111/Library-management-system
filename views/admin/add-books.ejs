<%
// NOTE: EJS is for TEMPLATING. The logic like session check, database ops,
// and handling the POST request should be done in your Express route file.
// This EJS file assumes the following variables are passed from the Express route:
// - userId: The ID of the current user.
// - userType: The type of the current user (e.g., 'Admin').
// - message: An error or status message to display.
// - isbn, bookName, authorName, publisherName, quantity: Values for the form fields.
// - BASE_URL: The base URL for assets.

// ðŸš¨ AJAX Expected Response Keys (For clarity, ensure your AJAX route maps DB snake_case to these camelCase keys)
// { success: true, bookName: "...", authorName: "...", publisherName: "..." }
%>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Books</title>
    <link rel="stylesheet" href="<%= BASE_URL %>assets/css/formLayout.css" />
</head>
<body>

<div class="background-container"></div>

    <div class="container">
        <h2>Enter Book Details</h2>
        <form id="AddBooksForm" method="POST" onsubmit="return true;" >

            <div class="form-group">
                <label for="isbn">ISBN (13 digits):<span class="red-star">*</span></label>
                <input type="text" id="isbn" name="isbn" maxlength="13" pattern="\d{13}" title="Enter exactly 13 digits"
                required class="input" onfocus="initiate()"
                value="<%= isbn %>">
                <small class="input-hint">
                If this ISBN already exists, book details will be auto-filled.
                </small>
                <span id="bookError" class="error"><%= message %></span>
            </div>


            <div class="form-group">
                <label for="bookName">Book Name:<span class="red-star">*</span></label>
                <input type="text" id="bookName" name="bookName" required class="input"
                value="<%= bookName %>">
            </div>

            <div class="form-group">
                <label for="authorName">Author Name:<span class="red-star">*</span></label>
                <input type="text" id="authorName" name="authorName" required class="input"
                value="<%= authorName %>">
            </div>

            <div class="form-group">
                <label for="publisherName">Publisher Name:<span class="red-star">*</span></label>
                <input type="text" id="publisherName" name="publisherName" required class="input"
                value="<%= publisherName %>">
            </div>

            <div class="form-group">
                <label for="quantity">Quantity:<span class="red-star">*</span></label>
                <input type="number" id="quantity" name="quantity" min="1" max="100" step="1"
                required class="input"
                value="<%= quantity %>">
            </div>

            <button type="submit">Add book to the library</button>
        </form>
    </div>
    <script>
        //removing book details don't match with isbn error message
        function initiate()
        {
            document.getElementById("bookError").innerHTML="";
        }

        //using AJAX to fetch book details on entering isbn
        document.addEventListener("DOMContentLoaded", function () {
        const isbnField = document.getElementById("isbn");

        isbnField.addEventListener("input", function () {
            const isbn = isbnField.value.trim();

            if (isbn.length === 13 && /^\d{13}$/.test(isbn))
            {
                // Call backend route for fetching book details.
                fetch("/api/books/details-by-isbn", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json", // Use JSON in Node.js/Express
                    },
                    // Send data as a JSON object
                    body: JSON.stringify({ isbn: isbn }),
                })
                    .then((response) => response.json())
                    .then((data) => {
                        if (data.success)
                        {
                            // ðŸŒŸ This relies on the backend route returning camelCase keys!
                            document.getElementById("bookName").value = data.bookName;
                            document.getElementById("authorName").value = data.authorName;
                            document.getElementById("publisherName").value = data.publisherName;
                            showToast("Book details fetched from existing records.");// Show a toast message
                        }
                    })
                    .catch((error) => {
                        console.error("Error fetching book details:", error);
                    });
            }
        });

        isbnField.addEventListener("focus", function () {
            document.getElementById("bookError").innerHTML = "";
        });
    });

// Show a toast message on fetching book details on giving isbn
function showToast(message) {
    const toast = document.createElement("div");
    toast.innerText = message;
    toast.style.position = "fixed";
    toast.style.top = "30px";
    toast.style.left = "50%";
    toast.style.transform = "translateX(-50%)";
    toast.style.backgroundColor = "#333";
    toast.style.color = "#fff";
    toast.style.padding = "10px 20px";
    toast.style.borderRadius = "5px";
    toast.style.zIndex = "1000";
    toast.style.boxShadow = "0 2px 10px rgba(0,0,0,0.2)";
    toast.style.fontSize = "0.95rem";
    document.body.appendChild(toast);
    setTimeout(() => toast.remove(), 3000); // Remove after 3 seconds
}
    </script>
</body>
</html>